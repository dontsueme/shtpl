#!/bin/sh
# Author: Stefan Giermair (zstegi@gmail.com)
# License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
# This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.

print_help() {
  printf "\n  %s\n"\
  "shtpl (VERSION) - shell templating system

  Syntax:
  #% shell-command
  #%# comment
  #%include file
  #%raw 
  #%end raw
  #%incraw file (include raw file)
  #slurp        (removes trailing newline)
  %$            (masks $)

  Options:
  -ass/--allow-subshell: does not mask \$(, ´
  -o  /--optimize      : minimize printf usage

  Usage: sh -c \"\$( shtpl [Options...] template )\"
"
  exit $1 
}

unset Ass
unset Opt

while true; do
  case "$1" in
    -h|--help)
      print_help 0
      ;;
    -ass|--allow-subshell)
      Ass=1
      ;;
    -o|--optimize)
      Opt=1
      ;;
    *)
      break
      ;;
  esac
  shift
done

unset Cache
#Nl=$'\n'
Nl="$( printf "\nx" )"
Nl="${Nl%x}"

addCache() {
  [ "$Cache" ] && Cache="$Cache$Nl$1" || Cache="$1"
}

printCache() {
  [ "$Cache" ] && printf 'printf "%%s\\n" "%s"\n' "$Cache" && unset Cache 
}

# to prevent breakout of the printf "%s" "$Line" command
# only variable substitution is (hopefully) allowed. no subshell '$(cmd)' and '`cmd`'.
# dangerous signs therefore are: \, ", (, ), `
sanitizeLineForEval() {
  printf "%s" "$Line" | sed -e 's/^#%[^ ]*//' -e 's/^ *//' -e 's/ *$//' \
    -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e 's,(,\\(,g' -e 's,),\\),g' -e 's/`/\\`/g'
}

shtpl() {
  File="$1"
  Raw="$2"
  IFS=
  while read -r 'Line'; do  
    if [ -z "$Raw" ] && printf "%s" "$Line" | grep -q "^#%"; then
      if printf "%s" "$Line" | grep -q '^#%include'; then
        Line="$( sanitizeLineForEval )"
        shtpl "$( eval printf "%s" "$Line" )"
      elif printf "%s" "$Line" | grep -q "^#%incraw"; then
        Line="$( sanitizeLineForEval )"
        shtpl "$( eval printf "%s" "$Line" )" "RAW"
      elif printf "%s" "$Line" | grep -q '^#%raw[ ]*$' ; then
        Raw="TEXT"
      else
        [ "$Opt" ] && printCache
        printf "%s\n" "$( printf "%s" "$Line" | sed 's/^#%//' )"
      fi
      continue
    elif [ "$Raw" = "TEXT" ] && printf "%s" "$Line" | grep -q '^#%end raw'; then
      unset Raw
      continue
    fi

    # dangerous signs are:  \, ", $(, ´ 
    Line="$( printf "%s" "$Line" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g' )"
    if [ "$Raw" ]; then
      Line="$( printf "%s" "$Line" | sed -e 's/\$/\\$/g' -e 's/`/\\`/g' )"
    else
      Line="$( printf "%s" "$Line" | sed -e 's/%\$/\\$/g' )"
      if [ -z "$Ass" ]; then
        Line="$( printf "%s" "$Line" | sed -e 's/$(/\\$(/g' -e 's/`/\\`/g' )"
      fi
    fi

    if [ -z "$Raw" ] && printf "%s" "$Line" | grep -q '#slurp$'; then
      [ "$Opt" ] && printCache
      Line="$( printf "%s" "$Line" | sed 's/#slurp$//' )"
      printf 'printf "%%s" "%s"\n' "$Line"
    else 
      if [ "$Opt" ]; then 
        addCache "$Line"
      else
        printf 'printf "%%s\\n" "%s"\n' "$Line"
      fi
    fi
  done < "$File"
  unset Raw 
}

shtpl "$1" && [ "$Opt" ] && printCache
